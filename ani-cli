#!/bin/sh

# dependencies: grep sed curl video_player
# video_player ( needs to be able to play urls )

prog="ani-cli"
site="gogoanime.wiki"

c_red="\033[1;31m"
c_green="\033[1;32m"
c_yellow="\033[1;33m"
c_blue="\033[1;34m"
c_magenta="\033[1;35m"
c_cyan="\033[1;36m"
c_reset="\033[0m"

status(){
	echo $2 >> $1
	echo $(cat $1 | tr "\n" ",")
	
}

help_text () {
	while IFS= read line; do
		printf "%s\n" "$line"
	done <<-EOF
	USAGE: $prog <query>
	 -h	 show this help text
	 -d	 download episode
	EOF
}

die () {
	printf "$c_red%s$c_reset\n" "$*" >&2
	exit 0
}

err () {
	printf "$c_red%s$c_reset\n" "$*" >&2
}

search_anime () {
	# get anime name along with its id
	search=$1
	titlepattern='<a href="/category/'

	curl -s "https://$site//search.html" \
		-G \
		-d "keyword=$search" | sed -n -E '
		s_^[[:space:]]*<a href="/category/([^"]*)" title="([^"]*)".*_\1_p
		'
}

search_eps () {
	# get available episodes for anime_id
	anime_id=$1

	curl -s "https://$site/category/$anime_id" |
	sed -n -E '
		/^[[:space:]]*<a href="#" class="active" ep_start/{
		s/.* '\''([0-9]*)'\'' ep_end = '\''([0-9]*)'\''.*/\2/p
		q
		}
		'
}

get_embedded_video_link() {
	# get the download page url
	anime_id=$1
	ep_no=$2

	# credits to fork: https://github.com/Dink4n/ani-cli for the fix
	    curl -s "https://$site/$anime_id-episode-$ep_no" | sed -n -E 's/^[[:space:]]*<li class="dowloads"><a href="([^"]*)".*/\1/p'
}

get_links () {
	embedded_video_url="$1"
	curl -s "$embedded_video_url" | sed -n -E 's/^[[:space:]]*href="([^"]*)".*/\1/p' | grep -Eo "(http|https):\/\/.*com\/cdn.*expiry=[0-9]*" | tail -1 | sed 's/amp;//'   
}

# get query
get_search_query () {
	if [ -z "$*" ]; then
		printf "Search Anime: "
		read -r query
	else
		query=$*
	fi
}


#####################
## Anime selection ##
#####################

anime_selection () {
	search_results=$*
	menu_format_string='[%d] %s\n'
	menu_format_string_c1="$c_blue[$c_cyan%d$c_blue] $c_reset%s\n"
	menu_format_string_c2="$c_blue[$c_cyan%d$c_blue] $c_yellow%s$c_reset\n"

	count=1
	while read anime_id; do
		# alternating colors for menu
		[ $((count % 2)) -eq 0 ] &&
			menu_format_string=$menu_format_string_c1 ||
			menu_format_string=$menu_format_string_c2

		printf "$menu_format_string" "$count" "$anime_id"
		count=$((count+1))
	done <<-EOF
	$search_results
	EOF

	# User input
	printf "$c_blue%s$c_green" "Enter number: "
	read choice
	printf "$c_reset"

	# Check if input is a number
	[ "$choice" -eq "$choice" ] 2>/dev/null || die "Invalid number entered"

	# Select respective anime_id
	count=1
	while read anime_id; do
		if [ $count -eq $choice ]; then
			selection_id=$anime_id
			break
		fi
		count=$((count+1))
	done <<-EOF
	$search_results
	EOF

	[ -z "$selection_id" ] && die "Invalid number entered"

	read last_ep_number <<-EOF
	$(search_eps "$selection_id")
	EOF
}

##################
## Ep selection ##
##################

episode_selection () {
	[ $is_download -eq 1 ] &&
		printf "Range of episodes can be specified: start_number end_number\n"

	printf "${c_blue}Choose episode $c_cyan[1-%d]$c_reset:$c_green " $last_ep_number
	read ep_choice_start ep_choice_end
	printf "$c_reset"

}

open_episode () {
	anime_id=$1
	episode=$2

	if [ $episode -lt 1 ] || [ $episode -gt $last_ep_number ]; then
		err "Episode out of range"
		printf "${c_blue}Choose episode $c_cyan[1-%d]$c_reset:$c_green " $last_ep_number
		read episode
		printf "$c_reset"
	fi

	printf "\nGetting data for episode %d\n" $episode

	embedded_video_url=$(get_embedded_video_link "$anime_id" "$episode")
	video_url=$(get_links "$embedded_video_url")
	
	if [ $is_download -eq 0 ]; then
		termux-open --content-type video "$video_url"
	else
		printf "\n${c_blue}Downloading episode: $episode ...\n${c_reset}"
		echo "$embedded_video_url"
		echo "$video_url"
		# add 0 padding to the episode name
		episode=$(printf "%03d" $episode)
		{
			termux-notification --ongoing -i 0 -t "$anime_id" -c "Downloading episode $episode ..."
	#		aria2c -x 16 -s 16 --referer "$embedded_video_url" "$video_url" --dir=/storage/7689-5BBD -o "${anime_id}-${episode}.mp4" && dl=$(status "dl" "$episode") && 
			aria2c --referer "$embedded_video_url" "$video_url" --dir=/sdcard -o "${anime_id}-${episode}.mp4" && dl=$(status "dl" "$episode") && 
				printf "${c_green}Downloaded episode: %s${c_reset}\n" "$episode" && termux-notification -i 1 -t "$anime_id" -c "Downloaded episode $dl" ||
				(printf "${c_red}Download failed episode: %s${c_reset}\n" "$episode" && ndl=$(status "ndl" "$episode") && termux-notification -i 2 -t "$anime_id" -c "Downloaded failed episode $ndl")
			termux-notification-remove 0
		}
	fi
}

############
# Start Up #
############

# to clear the colors when exited using SIGINT
trap "printf '$c_reset'" INT HUP

# option parsing
is_download=0
while getopts 'hdH' OPT; do
	case $OPT in
		h)
			help_text
			exit 0
			;;
		d)
			is_download=1
			;;
	esac
done
shift $((OPTIND - 1))

########
# main #
########

get_search_query "$*"
search_results=$(search_anime "$query")
[ -z "$search_results" ] && die "No search results found"
anime_selection "$search_results"
episode_selection

{ # checking input
	[ "$ep_choice_start" -eq "$ep_choice_start" ] 2>/dev/null || die "Invalid number entered"
	episodes=$ep_choice_start

	if [ -n "$ep_choice_end" ]; then
		[ "$ep_choice_end" -eq "$ep_choice_end" ] 2>/dev/null || die "Invalid number entered"
		# create list of episodes to download/watch
		episodes=$(seq $ep_choice_start $ep_choice_end)
	fi
}

for ep in $episodes
do
	open_episode "$selection_id" "$ep"
done
episode=${ep_choice_end:-$ep_choice_start}

while :; do
	printf "\n${c_green}Currently playing %s episode ${c_cyan}%d/%d\n" "$selection_id" $episode $last_ep_number
	printf "$c_blue[${c_cyan}%s$c_blue] $c_yellow%s$c_reset\n" "n" "next episode"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_magenta%s$c_reset\n" "p" "previous episode"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_yellow%s$c_reset\n" "s" "select episode"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_magenta%s$c_reset\n" "r" "retry not downloaded episode"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_red%s$c_reset\n" "q" "exit"
	printf "${c_blue}Enter choice:${c_green} "
	read choice
	printf "$c_reset"
	case $choice in
		n)
			episode=$((episode + 1))
			open_episode "$selection_id" "$episode"
			;;
		p)
			episode=$((episode - 1))
			open_episode "$selection_id" "$episode"
			;;

		s)	printf "${c_blue}Choose episode $c_cyan[1-%d]$c_reset:$c_green " $last_ep_number
			read episode
			printf "$c_reset"
			[ "$episode" -eq "$episode" ] 2>/dev/null || die "Invalid number entered"
			open_episode "$selection_id" "$episode"
			;;

		r)	
			cnt=$(cat ndl | wc -l)
			while [ $cnt -gt "0" ] ; do
				cnt=$((cnt-1))
				read line < ndl 
				line=$(printf "%d" $line)
				sed -i '1d' ndl
				open_episode "$selection_id" "$line"
			done
			;;

		q)
			rm -f dl ndl
			break
			;;

		*)
			rm -f dl ndl
			die "invalid choice"
			;;
	esac

done
