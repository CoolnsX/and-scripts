#!/bin/sh

site="https://gogoplay5.com"

c_red="\033[1;31m"
c_green="\033[1;32m"
c_yellow="\033[1;33m"
c_blue="\033[1;34m"
c_magenta="\033[1;35m"
c_cyan="\033[1;36m"
c_reset="\033[0m"

status(){
	echo $2 >> $1
	echo $(cat $1 | tr "\n" ",")
}

down(){
case $2 in
    *mp4*)
	   aria2c --summary-interval=0 -x 16 -s 16 --referer="$1" "$2" --dir=/storage/7689-5BBD -o "${3}${4}.mp4" --download-result=hide;;
    *m3u*)
	   ffmpeg -loglevel error -stats -referer "$1" -i "$2" -c copy "/storage/7689-5BBD/${3}${4}.mp4";;
esac
}

die () {
	printf "$c_red%s$c_reset\n" "$*" >&2
	exit 0
}

err () {
	printf "$c_red%s$c_reset\n" "$*" >&2
}

search_anime () {
	curl -s "$site/search.html?keyword=$1" | sed -nE 's_^[[:space:]]*<a href="/videos/([^"]*)">_\1_p'
}

embade_link() {
	curl -s "$site/videos/${1}${2}" | sed -nE 's_^[[:space:]]*<iframe src="([^"]*)".*_\1_p' | sed 's/^/https:/g'
}

decrypt_link() {
	secret_key='3633393736383832383733353539383139363339393838303830383230393037'
	iv='34373730343738393639343138323637'
	ajax_url="$site/encrypt-ajax.php"
	id=$(printf "%s" "$1" | sed -nE 's/.*id=(.*)&title.*/\1/p')
	ajax=$(printf "%s" "$id" | openssl enc -e -aes256 -K "$secret_key" -iv "$iv" | base64)
	data=$(curl -s -H "X-Requested-With:XMLHttpRequest" "$ajax_url" -d "id=$ajax" | cut -d\" -f4 | tr -d '\\')
	printf '%s' "$data" | base64 -d | openssl enc -d -aes256 -K "$secret_key" -iv "$iv" | sed -e 's/\].*/\]/' -e 's/\\//g' | grep -Eo 'https:\/\/[-a-zA-Z0-9@:%._\+~#=][a-zA-Z0-9][-a-zA-Z0-9@:%_\+.~#?&\/\/=]*' | head -4 | tail -1
}

get_search_query () {
	if [ -z "$*" ]; then
		printf "Search Anime: "
		read -r query
	else
		query=$*
	fi
	query=$(printf "$query" | tr ' ' '-')
}

#####################
## Anime selection ##
#####################

anime_selection () {
	search_results=$*
	menu_format_string='[%d] %s\n'
	menu_format_string_c1="$c_blue[$c_cyan%d$c_blue] $c_reset%s\n"
	menu_format_string_c2="$c_blue[$c_cyan%d$c_blue] $c_yellow%s$c_reset\n"

	count=1
	while read anime_id; do
		[ $((count % 2)) -eq 0 ] &&
			menu_format_string=$menu_format_string_c1 ||
			menu_format_string=$menu_format_string_c2

		printf "$menu_format_string" "$count" "$anime_id"
		count=$((count+1))
	done <<-EOF
	$search_results
	EOF

	printf "$c_blue%s$c_green" "Enter number:"
	read choice
	printf "$c_reset"
	[ "$choice" -eq "$choice" ] 2>/dev/null || die "Invalid number entered"

	count=1
	while read anime_id; do
		if [ $count -eq $choice ]; then
			selection_id=$anime_id
			break
		fi
		count=$((count+1))
	done <<-EOF
	$search_results
	EOF

	[ -z "$selection_id" ] && die "Invalid number entered"

	read last_ep_number <<-EOF
	$(printf "%s" "$selection_id" | grep -Po '\K\d+' | tail -1)
	EOF
	selection_id=$(printf "%s" "$selection_id" | sed 's/[0-9]*.$//')
}

##################
## Ep selection ##
##################

episode_selection () {
	first_ep_number=0
        result=$(embade_link "$selection_id" "$first_ep_number")
        [ -z "$result" ] && first_ep_number=1
    	printf "Range of episodes can be specified: start_number end_number\n"
	printf "${c_blue}Choose episode $c_cyan[%d-%d]$c_reset:$c_green " "$first_ep_number" "$last_ep_number"
	read ep_choice_start ep_choice_end
	printf "$c_reset"
}

open_episode () {
	anime_id=$1
	episode=$2

	if [ $episode -lt $first_ep_number ] || [ $episode -gt $last_ep_number ]; then
		err "Episode out of range"
		printf "${c_blue}Choose episode $c_cyan[1-%d]$c_reset:$c_green " $last_ep_number
		read episode
		printf "$c_reset"
	fi

	printf "\nGetting data for episode %d\n" $episode
	embedded_url=$(embade_link "$anime_id" "$episode")
	echo "$embedded_url"
	video_url=$(decrypt_link "$embedded_url")
	echo "$video_url"
	printf "\n${c_blue}Downloading episode: $episode ...\n${c_reset}"
	episode=$(printf "%03d" $episode)
	{
	    termux-notification --ongoing -i 0 -t "$anime_id" -c "Downloading episode $episode ..."
	    down "$embedded_url" "$video_url" "$anime_id" "$episode" &&
		dl=$(status "dl" "$episode") && printf "${c_green}Downloaded episode: %s${c_reset}\n" "$episode" && termux-notification -i 1 -t "$anime_id" -c "Downloaded episode $dl" ||
		    (printf "${c_red}Download failed episode: %s${c_reset}\n" "$episode" && ndl=$(status "ndl" "$episode") && termux-notification -i 2 -t "$anime_id" -c "Downloaded failed episode $ndl")
	    termux-notification-remove 0
	}
}

############
# Start Up #
############

trap "printf '$c_reset';termux-notification-remove 0;rm -f dl ndl;exit 0" INT HUP

########
# main #
########

get_search_query "$*"
search_results=$(search_anime "$query")
[ -z "$search_results" ] && die "No search results found"
anime_selection "$search_results"
episode_selection

{
	[ "$ep_choice_start" -eq "$ep_choice_start" ] 2>/dev/null || die "Invalid number entered"
	episodes=$ep_choice_start

	if [ -n "$ep_choice_end" ]; then
		[ "$ep_choice_end" -eq "$ep_choice_end" ] 2>/dev/null || die "Invalid number entered"
		episodes=$(seq $ep_choice_start $ep_choice_end)
	fi
}

for ep in $episodes
do
	open_episode "$selection_id" "$ep"
done
episode=${ep_choice_end:-$ep_choice_start}

while :; do
	printf "\n${c_green}Currently playing %s episode ${c_cyan}%d/%d\n" "$selection_id" $episode $last_ep_number
	printf "$c_blue[${c_cyan}%s$c_blue] $c_yellow%s$c_reset\n" "n" "next episode"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_magenta%s$c_reset\n" "p" "previous episode"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_yellow%s$c_reset\n" "s" "select episode"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_magenta%s$c_reset\n" "r" "retry not downloaded episode"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_red%s$c_reset\n" "q" "exit"
	printf "${c_blue}Enter choice:${c_green} "
	read choice
	printf "$c_reset"
	case $choice in
		n)
			episode=$((episode + 1))
			open_episode "$selection_id" "$episode";;
		p)
			episode=$((episode - 1))
			open_episode "$selection_id" "$episode";;

		s)	printf "${c_blue}Choose episode $c_cyan[1-%d]$c_reset:$c_green " $last_ep_number
			read episode
			printf "$c_reset"
			[ "$episode" -eq "$episode" ] 2>/dev/null || die "Invalid number entered"
			open_episode "$selection_id" "$episode";;

		r)	
			cnt=$(cat ndl | wc -l)
			while [ $cnt -gt "0" ] ; do
				cnt=$((cnt-1))
				read line < ndl 
				line=$(printf "%d" $line)
				sed -i '1d' ndl
				open_episode "$selection_id" "$line"
			done;;

		q)
			rm -f dl ndl
			break;;

		*)
			rm -f dl ndl
			die "invalid choice";;
	esac
done
