#!/bin/sh

down () {
	printf "\32[2K\r\033[1;32mDownloading\033[0m %s\n" "$2"
	case $2 in
	    *m3u8*)
		    ffmpeg -loglevel error -stats -referer "$1" -user_agent "$agent" -i "$2" -c copy "/storage/7689-5BBD/$url.mp4" && termux-notification -t "Episode Downloaded" -c "$url" || (termux-notification -t "Downloading failed" -c "$url" && exit 0);;
	    *)
		    aria2c -U "$agent" --check-certificate=false --summary-interval=0 -x 16 -s 16 --referer="$1" "$2" --dir=/storage/7689-5BBD -o "$url.mp4" --download-result=hide && termux-notification -t "Episode Downloaded" -c "$url" || (termux-notification -t "Downloading failed" -c "$url" && exit 0);;
	esac
	exit 0
}

base_url=https://goload.pro
agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36"
trap "exit 0" INT HUP
url=$(curl -A "$agent" -s "$base_url" | sed -nE 's_.*<a href="/videos/([^"]*)">_\1_p' | fzf)
[ -z "$url" ] && exit 0 || printf "\033[1;35mSelected $url\n\033[1;36mLoading Episode.."
refr=$(curl -A "$agent" -s "$base_url/videos/$url" | sed -nE 's/.*iframe src="(.*)" al.*/\1/p')
printf "\33[2K\r\033[1;34mFetching Embed links"
resp="$(curl -A "$agent" -s "https:$refr")"
links=$(printf "%s" "$resp" | sed -nE 's/.*data-status="1".*data-video="(.*)">.*/\1/p')

mp4up_link=$(printf "$links" | grep "mp4upload")
printf "\33[2K\r\033[1;34mFetching mp4upload links < \033[0m%s" "$(printf "$mp4up_link" | cut -d"-" -f2)"
[ -z "$mp4up_link" ] || mp4up_video=$(curl -A "$agent" -s "$mp4up_link" -H "DNT: 1" | sed -nE 's_.*embed\|(.*)\|.*blank.*\|(.*)\|(.*)\|(.*)\|(.*)\|src.*_https://\1.mp4upload.com:\5/d/\4/\3.\2_p')
[ -z "$mp4up_video" ] && printf "\33[2K\r\033[1;31m unable to fetch mp4upload link\033[0m" || down "$mp4up_link" "$mp4up_video"

dood_id=$(printf "$links" | sed -n "s_.*dood.*/e/__p")
printf "\n\033[1;34mFetching doodstream links <\033[0m $dood_id"
[ -z "$dood_id" ] || dood_link=$(curl -A "$agent" -s "https://dood.ws/d/$dood_id" | sed -nE 's/<a href="(.*)" class="btn.*justify.*/\1/p')
sleep 0.5
[ -z "$dood_link" ] || dood_video=$(curl -A "$agent" -s "https://dood.ws${dood_link}" | sed -nE "s/.*window.open.*'(.*)',.*/\1/p")
[ -z "$dood_video" ] && printf "\33[2K\r\033[1;31m unable to fetch doodstream link\033[0m" || down "https://dood.ws/d/$dood_id" "$dood_video"

fb_id=$(printf "$links" | sed -n "s_.*fembed.*/v/__p")
printf "\n\033[1;34mFetching xstreamcdn links <\033[0m $fb_id"
[ -z "$fb_id" ] || fb_video=$(curl -A "$agent" -s -X POST "https://fembed-hd.com/api/source/$fb_id" -H "x-requested-with:XMLHttpRequest" | sed -e 's/\\//g' -e 's/.*data"://' | tr "}" "\n" | sed -nE 's/.*file":"(.*)","label.*/\1/p' | tail -1)
[ -z "$fb_video" ] && printf "\33[2K\r\033[1;31m unable to fetch xstreamcdn link\033[0m" || down "https://fembed-hd.com/v/$fb_id" "$fb_video"

id=$(printf "%s" "$refr" | sed -nE 's/.*id=(.*)&title.*/\1/p')
printf "\n\033[1;34mFetching goload links < \033[0m$id"
secret_key=$(printf "%s" "$resp" | sed -nE 's/.*class="container-(.*)">/\1/p' | tr -d "\n" | od -A n -t x1 | tr -d " |\n")
iv=$(printf "%s" "$resp" | sed -nE 's/.*class="wrapper container-(.*)">/\1/p' | tr -d "\n" | od -A n -t x1 | tr -d " |\n")
second_key=$(printf "%s" "$resp" | sed -nE 's/.*class=".*videocontent-(.*)">/\1/p' | tr -d "\n" | od -A n -t x1 | tr -d " |\n")
token=$(printf "%s" "$resp" | sed -nE 's/.*data-value="(.*)">.*/\1/p' | base64 -d | openssl enc -d -aes256 -K "$secret_key" -iv "$iv" | sed -nE 's/.*&(token.*)/\1/p')
ajax=$(printf '%s' "$id" |openssl enc -e -aes256 -K "$secret_key" -iv "$iv" | base64)
printf "\33[2K\r\033[1;35mEncrpyting/Decrypting some shit"
video="$(curl -A "$agent" -s -H "X-Requested-With:XMLHttpRequest" "${base_url}/encrypt-ajax.php?id=${ajax}&alias=${id}&${token}" | sed -e 's/{"data":"//' -e 's/"}/\n/' -e 's/\\//g' | base64 -d | openssl enc -d -aes256 -K "$second_key" -iv "$iv" | sed -e 's/\].*/\]/' -e 's/\\//g' | grep -Eo 'https:\/\/[-a-zA-Z0-9@:%._\+~#=][a-zA-Z0-9][-a-zA-Z0-9@:%_\+.~#?&\/\/=]*' | head -4 | tail -1)"
[ -z "$video" ] || down "$base_url" "$video"
